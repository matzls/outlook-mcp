---
description: Debugging workflow and error resolution
globs:
alwaysApply: false
---
# DEBUGGING WORKFLOW

<DEBUGGING>
Below debugging routine is for persistent errors or incomplete fixes. Use this routine only when got stuck.

<DIAGNOSE>
- Gather all error messages, logs, and behavioral symptoms
- Add relevant context from files
- Retrieve relevant project architecture, plan and current working task as specified in [memory.mdc](mdc:.cursor/rules/memory.mdc)
- Identify when and where the issue occurs (context of the error)
- Determine if the issue is reproducible and under what conditions
- Check if similar issues have been encountered before in [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc)
- Examine recent changes that might have introduced the issue
</DIAGNOSE>

- Whenever you fail with any test result, always add more context using <DIAGNOSE> and debug the issue effectively first, then when you have complete information move towards a fix.
- Explain your OBSERVATIONS and then give your REASONINGS to explain why this is EXACTLY the issue and not anything else.
- If you aren't sure, first get more OBSERVATIONS by adding more <DIAGNOSE> context to the issue so you exactly and specifically know what's wrong. Additionally you can seek <CLARIFICATION> if required.
- Understand architecture using <ANALYZE CODE> (defined in [implement.mdc](mdc:.cursor/rules/implement.mdc)) relevant to the issue.
- Use <STEP BY STEP REASONING> to think of all possible causes like architectural misalignment, design flaw rather than just a bug, etc.
- Look for similar patterns already solved elsewhere in the codebase in [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc)
- Present your fix using <REASONING PRESENTATION> for validation.
- Start modifying code to update and fix things using <SYSTEMATIC CODE PROTOCOL> and <TESTING> (both defined in [implement.mdc](mdc:.cursor/rules/implement.mdc)).
</DEBUGGING>

## Common Debugging Patterns
1. **Trace the flow**: Follow the execution path from input to error point
2. **Isolate the issue**: Create minimal reproduction cases
3. **Check assumptions**: Verify that your understanding of how the code should work matches reality
4. **Review recent changes**: Look for recent modifications that might have introduced the issue
5. **Test incrementally**: Make small changes and test after each one
