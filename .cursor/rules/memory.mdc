---
description: Project context management and documentation guidelines
globs:
alwaysApply: true
---
# Project Context Management

## Memory Files Structure
This outlines the fundamental principles, required files, workflow structure, and essential procedures that govern documentation, and maintaining a memory using file system.

The Memory Files consists of required core files and optional context files. Files build upon each other in a clear hierarchy:

```mermaid
flowchart TD
    DEV[DEVELOPMENT.md] --> TASKS[TASKS.md]
    DEV --> README[README.md]

    TASKS --> TESTING[TESTING_STANDARDS.md]

    TASKS --> ErrorDoc[error-documentation.mdc]
    TASKS --> Lessons[lessons-learned.mdc]

    subgraph Documentation
        README
        DEV
        TASKS
        TESTING
    end

    subgraph Rules
        ErrorDoc
        Lessons
    end
```

### Core Files (Required)
1. **DEVELOPMENT.md**: High-level architecture documentation and project evolution tracker
   - Architecture overview
   - Design decisions and rationales
   - Feature history
   - Roadmap
   - Project quality gates

2. **TASKS.md**: Detailed task backlog and project progress
   - Current tasks
   - Completed tasks
   - Known issues
   - Discovered tasks during work

3. **README.md**: Project overview and setup instructions
   - Project purpose
   - Installation instructions
   - Usage examples
   - Contributing guidelines

4. **TESTING_STANDARDS.md**: Comprehensive testing and linting standards
   - Test coverage requirements
   - Linting rules
   - Type checking requirements
   - Security scanning guidelines

5. **error-documentation.mdc**: Known issues and their resolutions
   - During your interaction, if you find a fix to a mistake in this project or a correction you received reusable, you should take note in the error-documentation.mdc file so you will not make the same mistake again.
   - Known issues: their state, context, and resolution

6. **lessons-learned.mdc**: Learning journal for each project
   - It captures important patterns, preferences, and project intelligence

## Core Workflows

### PLAN or Architect MODE
```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Files]
    ReadFiles --> CheckFiles{Files Complete?}

    CheckFiles -->|No| Plan[Create Plan]
    Plan --> DocumentChat[Document in Chat]

    CheckFiles -->|Yes| VerifyContext[Verify Context]
    VerifyContext --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]

    Present --> Verification{Approach Verified?}

    Verification -->|No| Clarify[Seek Clarification]
    Clarify --> Strategy[Develop Strategy]

    Verification -->|Yes| DocumentMemory[Document in Memory Files]
```

### ACT or Code MODE
```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Files]
    Context --> Update[Update Documentation]
    Update --> Rules[Update lessons-learned.mdc, error-documentation.mdc if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes in Memory Files]
```

## Documentation Updates

Documentation updates should occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory files** (MUST review ALL Core Files)
4. When context needs clarification
5. After significant part of a plan is verified
6. After resolving a significant bug or issue
7. When adding new dependencies or integrations
8. When changing architectural decisions
9. When completing a milestone or feature

When you see the command **update memory files**, you MUST:
1. Review ALL Core Files, even if some don't require updates
2. Update the current state in TASKS.md
3. Document any new lessons learned in lessons-learned.mdc
4. Record any resolved issues in error-documentation.mdc
5. Update DEVELOPMENT.md with any architectural changes

```mermaid
flowchart TD
    Start[Update Process]

    subgraph Process
        P1[Review Core Files]
        P2[Document Current State in TASKS.md]
        P3[Clarify Next Steps and document in TASKS.md]
        P4[Update lessons-learned.mdc, error-documentation.mdc]

        P1 --> P2 --> P3 --> P4
    end

    Start --> Process
```

Note: When triggered by **update memory files**, I MUST review every Core memory file, even if some don't require updates. Focus particularly on TASKS.md as it tracks current state.

## DEVELOPMENT.md Guidelines
- **Purpose**: DEVELOPMENT.md serves as the high-level architecture documentation and project evolution tracker
- **Structure**:
  - Keep sections concise with brief summaries (1-3 sentences per item)
  - Focus on WHY decisions were made, not detailed HOW
  - Use links to code, PRs, or other docs for implementation details
- **Content Management**:
  - Consolidate completed features into a single "Feature History" section with newest first
  - Keep architecture diagrams and component relationships up-to-date
  - Maintain a single "Roadmap" section for all future work (near and long-term)
  - Remove redundancies between sections and with other documents
- **Maintenance**:
  - Update after significant architectural changes or feature completions
  - Remove detailed implementation steps that belong in code comments or PR descriptions
  - Archive very old completed items to CHANGELOG.md if needed
  - Ensure the document stays under 500 lines by regularly condensing older content
- **Project Quality Gates**:
  - Include a section for project quality gates
  - Specify the activation status of testing standards (Not Yet Activated/ACTIVATED)
  - When activated, all new code must conform to the standards in testing.mdc

## Project Intelligence (lessons-learned.mdc)

The lessons-learned.mdc file is my learning journal for each project. It captures important patterns, preferences, and project intelligence that help me work more effectively. As I work with you and the project, I'll discover and document key insights that aren't obvious from the code alone.

```mermaid
flowchart TD
    Start{Discover New Pattern}

    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in lessons-learned.mdc]
    end

    subgraph Apply [Usage]
        A1[Read lessons-learned.mdc]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end

    Start --> Learn
    Learn --> Apply
```

### What to Capture
- Critical implementation paths
- User preferences and workflow
- Project-specific patterns
- Known challenges
- Evolution of project decisions
- Tool usage patterns

The format is flexible - focus on capturing valuable insights that help me work more effectively with you and the project. Think of lessons-learned.mdc as a living document that grows smarter as we work together.

## Quick Reference Commands
- Virtual env creation: `uv venv foldername_venv && source foldername_venv/bin/activate`
- UV install: `uv pip install package-name`
- Run tests: `pytest tests/`
- Format code: `ruff format .`
- Lint code: `ruff check .`
- Type check: `mypy .`
